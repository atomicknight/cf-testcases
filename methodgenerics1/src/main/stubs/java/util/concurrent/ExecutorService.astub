package java.util.concurrent;

import org.checkerframework.checker.nullness.qual.Nullable;

interface ExecutorService extends Executor {
    void shutdown();
    List<Runnable> shutdownNow();
    boolean isShutdown();
    boolean isTerminated();
    boolean awaitTermination(long arg0, TimeUnit arg1) throws InterruptedException;
    <T extends @Nullable Object> Future<T> submit(Callable<T> arg0);
    <T extends @Nullable Object> Future<T> submit(Runnable arg0, T arg1);
    Future<?> submit(Runnable arg0);
    <T extends @Nullable Object> List<Future<T>> invokeAll(Collection<? extends Callable<T>> arg0) throws InterruptedException;
    <T extends @Nullable Object> List<Future<T>> invokeAll(Collection<? extends Callable<T>> arg0, long arg1, TimeUnit arg2) throws InterruptedException;
    <T extends @Nullable Object> T invokeAny(Collection<? extends Callable<T>> arg0) throws InterruptedException,ExecutionException;
    <T extends @Nullable Object> T invokeAny(Collection<? extends Callable<T>> arg0, long arg1, TimeUnit arg2) throws InterruptedException,ExecutionException,TimeoutException;
}
